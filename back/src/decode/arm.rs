//! Implementation of an ARM instruction decoder.

use crate::bits::xDisplay;

/// Enumerated type describing different kinds of ARM instruction encodings.
#[derive(Clone, Debug, PartialEq)]
pub enum ArmInst {
    AndRegShiftReg, AdcRegShiftReg, MovRegShiftReg, OrrRegShiftReg,
    EorRegShiftReg, RscRegShiftReg, MvnRegShiftReg, SbcRegShiftReg,
    AddRegShiftReg, BicRegShiftReg, RsbRegShiftReg, SubRegShiftReg,
    TeqRegShiftReg, CmnRegShiftReg, TstRegShiftReg, CmpRegShiftReg,

    SbcReg, OrrReg, BicReg, AddReg, RscReg, EorReg, MvnReg, AdcReg,
    SubReg, MovReg, AndReg, RsbReg, CmpReg, TstReg, CmnReg, TeqReg,
    MovImm, AddImm, AdcImm, RsbImm, OrrImm, BicImm, SubImm, MvnImm, 
    AndImm, RscImm, EorImm, SbcImm, CmnImm, CmpImm, TstImm, TeqImm,

    StrImm, StrhImm, StrdImm, StrbImm, StrReg, StrbReg, StrhReg, StrdReg, 
    LdrImm, LdrhImm, LdrdImm, LdrbImm, LdrsbImm, LdrshImm, 
    LdrReg, LdrbReg, LdrhReg, LdrdReg, LdrsbReg, LdrshReg, 

    Qdadd, Qsub, Qadd, Qdsub, Smull, Umlal, Smlal, Umull, Mul, Mla,
    Smulwb, Smlawb, Smlalbb, Smlabb, Smulbb,

    Ldrbt, Strbt, Ldrt, Strt, 
    MovImmAlt, LdrbtAlt, StrbtAlt, LdrtAlt, StrtAlt,
    Stm, Stmda, Ldmda, Ldmib, Ldmdb, Ldm, Stmdb, Stmib, 
    LdmRegUser, StmRegUser,
    MsrImm, MsrReg, Mrs, Mcrr, Mrrc, Mrc, Mcr, Stc,
    PldReg, PldImm, LdcImm, Clz, 
    B, BlImm, Bx, BlxReg, Bxj, 
    Svc, Bkpt, 
    BlxImm,
    Undefined,
}

impl std::fmt::Display for ArmInst {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        if !f.alternate() {
            return std::fmt::Debug::fmt(&self, f);
        }
        match self {
            ArmInst::AndRegShiftReg => write!(f, "and"),
            ArmInst::AdcRegShiftReg => write!(f, "adc"),
            ArmInst::MovRegShiftReg => write!(f, "mov"),
            ArmInst::OrrRegShiftReg => write!(f, "orr"),
            ArmInst::EorRegShiftReg => write!(f, "eor"),
            ArmInst::RscRegShiftReg => write!(f, "rsc"),
            ArmInst::MvnRegShiftReg => write!(f, "mvn"),
            ArmInst::SbcRegShiftReg => write!(f, "sbc"),
            ArmInst::AddRegShiftReg => write!(f, "add"),
            ArmInst::BicRegShiftReg => write!(f, "bic"),
            ArmInst::RsbRegShiftReg => write!(f, "rsb"),
            ArmInst::SubRegShiftReg => write!(f, "sub"),
            ArmInst::TeqRegShiftReg => write!(f, "teq"),
            ArmInst::CmnRegShiftReg => write!(f, "cmn"),
            ArmInst::TstRegShiftReg => write!(f, "tst"),
            ArmInst::CmpRegShiftReg => write!(f, "cmp"),
            ArmInst::SbcReg         => write!(f, "sbc"),
            ArmInst::OrrReg         => write!(f, "orr"),
            ArmInst::BicReg         => write!(f, "bic"),
            ArmInst::AddReg         => write!(f, "add"),
            ArmInst::RscReg         => write!(f, "rsc"),
            ArmInst::EorReg         => write!(f, "eor"),
            ArmInst::MvnReg         => write!(f, "mvn"),
            ArmInst::AdcReg         => write!(f, "adc"),
            ArmInst::SubReg         => write!(f, "sub"),
            ArmInst::MovReg         => write!(f, "mov"),
            ArmInst::AndReg         => write!(f, "and"),
            ArmInst::RsbReg         => write!(f, "rsb"),
            ArmInst::CmpReg         => write!(f, "cmp"),
            ArmInst::TstReg         => write!(f, "tst"),
            ArmInst::CmnReg         => write!(f, "cmn"),
            ArmInst::TeqReg         => write!(f, "teq"),
            ArmInst::MovImm         => write!(f, "mov"),
            ArmInst::AddImm         => write!(f, "add"),
            ArmInst::AdcImm         => write!(f, "adc"),
            ArmInst::RsbImm         => write!(f, "rsb"),
            ArmInst::OrrImm         => write!(f, "orr"),
            ArmInst::BicImm         => write!(f, "bic"),
            ArmInst::SubImm         => write!(f, "sub"),
            ArmInst::MvnImm         => write!(f, "mvn"),
            ArmInst::AndImm         => write!(f, "and"),
            ArmInst::RscImm         => write!(f, "rsc"),
            ArmInst::EorImm         => write!(f, "eor"),
            ArmInst::SbcImm         => write!(f, "sbc"),
            ArmInst::CmnImm         => write!(f, "cmn"),
            ArmInst::CmpImm         => write!(f, "cmp"),
            ArmInst::TstImm         => write!(f, "tst"),
            ArmInst::TeqImm         => write!(f, "teq"),
            ArmInst::StrImm         => write!(f, "str"),
            ArmInst::StrhImm        => write!(f, "strh"),
            ArmInst::StrdImm        => write!(f, "strd"),
            ArmInst::StrbImm        => write!(f, "strb"),
            ArmInst::StrReg         => write!(f, "str"),
            ArmInst::StrbReg        => write!(f, "strb"),
            ArmInst::StrhReg        => write!(f, "strh"),
            ArmInst::StrdReg        => write!(f, "strd"),
            ArmInst::LdrImm         => write!(f, "ldr"),
            ArmInst::LdrhImm        => write!(f, "ldrh"),
            ArmInst::LdrdImm        => write!(f, "ldrd"),
            ArmInst::LdrbImm        => write!(f, "ldrb"),
            ArmInst::LdrsbImm       => write!(f, "ldrsb"),
            ArmInst::LdrshImm       => write!(f, "ldrsh"),
            ArmInst::LdrReg         => write!(f, "ldr"),
            ArmInst::LdrbReg        => write!(f, "ldrb"),
            ArmInst::LdrhReg        => write!(f, "ldrh"),
            ArmInst::LdrdReg        => write!(f, "ldrd"),
            ArmInst::LdrsbReg       => write!(f, "ldrsb"),
            ArmInst::LdrshReg       => write!(f, "ldrsh"),
            ArmInst::Qdadd          => write!(f, "qdadd"),
            ArmInst::Qsub           => write!(f, "qsub"),
            ArmInst::Qadd           => write!(f, "qadd"),
            ArmInst::Qdsub          => write!(f, "qdsub"),
            ArmInst::Smull          => write!(f, "smull"),
            ArmInst::Umlal          => write!(f, "umlal"),
            ArmInst::Smlal          => write!(f, "smlal"),
            ArmInst::Umull          => write!(f, "umull"),
            ArmInst::Mul            => write!(f, "mul"),
            ArmInst::Mla            => write!(f, "mla"),
            ArmInst::Smulwb         => write!(f, "smulwb"),
            ArmInst::Smlawb         => write!(f, "wmlawb"),
            ArmInst::Smlalbb        => write!(f, "smlalbb"),
            ArmInst::Smlabb         => write!(f, "smlabb"),
            ArmInst::Smulbb         => write!(f, "smulbb"),
            ArmInst::Ldrbt          => write!(f, "ldrbt"),
            ArmInst::Strbt          => write!(f, "strbt"),
            ArmInst::Ldrt           => write!(f, "ldrt"),
            ArmInst::Strt           => write!(f, "strt"),
            ArmInst::MovImmAlt      => write!(f, "mov"),
            ArmInst::LdrbtAlt       => write!(f, "ldrb"),
            ArmInst::StrbtAlt       => write!(f, "strb"),
            ArmInst::LdrtAlt        => write!(f, "sdrt"),
            ArmInst::StrtAlt        => write!(f, "strt"),
            ArmInst::Stm            => write!(f, "stm"),
            ArmInst::Stmda          => write!(f, "stm"),
            ArmInst::Ldmda          => write!(f, "ldm"),
            ArmInst::Ldmib          => write!(f, "ldm"),
            ArmInst::Ldmdb          => write!(f, "ldm"),
            ArmInst::Ldm            => write!(f, "ldm"),
            ArmInst::Stmdb          => write!(f, "stm"),
            ArmInst::Stmib          => write!(f, "stm"),
            ArmInst::LdmRegUser     => write!(f, "ldm"),
            ArmInst::StmRegUser     => write!(f, "stm"),
            ArmInst::MsrImm         => write!(f, "msr"),
            ArmInst::MsrReg         => write!(f, "msr"),
            ArmInst::Mrs            => write!(f, "mrs"),
            ArmInst::Mcrr           => write!(f, "mcrr"),
            ArmInst::Mrrc           => write!(f, "mrrc"),
            ArmInst::Mrc            => write!(f, "mrc"),
            ArmInst::Mcr            => write!(f, "mcr"),
            ArmInst::Stc            => write!(f, "stc"),
            ArmInst::PldReg         => write!(f, "pld"),
            ArmInst::PldImm         => write!(f, "pld"),
            ArmInst::LdcImm         => write!(f, "ldc"),
            ArmInst::Clz            => write!(f, "clz"),
            ArmInst::B              => write!(f, "b"),
            ArmInst::BlImm          => write!(f, "bl"),
            ArmInst::Bx             => write!(f, "bx"),
            ArmInst::BlxReg         => write!(f, "blx"),
            ArmInst::Bxj            => write!(f, "bxj"),
            ArmInst::Svc            => write!(f, "svc"),
            ArmInst::Bkpt           => write!(f, "bkpt"),
            ArmInst::BlxImm         => write!(f, "blx"),
            ArmInst::Undefined      => write!(f, "undefined"),
        }
    }
}

/// Decoder implementation.
impl ArmInst {
    pub const fn decode(opcd: u32) -> Self {
        use ArmInst::*;
        if opcd & 0xf000_0000 == 0xf000_0000 {
            if opcd & 0x0e00_0000 == 0x0a000000 {
                return BlxImm;
            }
            return Undefined;
        }
        match opcd & 0x0ff000f0 {
            0x01400050 => return Qdadd,
            0x01200050 => return Qsub,
            0x01000050 => return Qadd,
            0x01600050 => return Qdsub,
            0x01200010 => return Bx,
            0x01600010 => return Clz,
            0x01200020 => return Bxj,
            0x01200070 => return Bkpt,
            0x01200030 => return BlxReg,
            _ => {},
        }
        match opcd & 0x0fe000f0 {
            0x00c00090 => return Smull,
            0x00a00090 => return Umlal,
            0x00e00090 => return Smlal,
            0x00800090 => return Umull,
            0x00000090 => return Mul,
            0x00200090 => return Mla,
            _ => {},
        }
        match opcd & 0x0fb000f0 {
            0x01200000 => return MsrReg,
            0x01000000 => return Mrs,
            _ => {},
        }
        match opcd & 0x0ff000b0 {
            0x012000a0 => return Smulwb,
            0x01200080 => return Smlawb,
            _ => {},
        }
        match opcd & 0x0ff00090 {
            0x01400080 => return Smlalbb,
            0x01300010 => return TeqRegShiftReg,
            0x01700010 => return CmnRegShiftReg,
            0x01100010 => return TstRegShiftReg,
            0x01500010 => return CmpRegShiftReg,
            0x01000080 => return Smlabb,
            0x01600080 => return Smulbb,
            _ => {},
        }
        match opcd & 0x0e5000f0 {
            0x005000d0 => return LdrsbImm,
            0x000000f0 => return StrdReg,
            0x004000b0 => return StrhImm,
            0x001000d0 => return LdrsbReg,
            0x005000f0 => return LdrshImm,
            0x001000f0 => return LdrshReg,
            0x004000f0 => return StrdImm,
            0x005000b0 => return LdrhImm,
            0x000000d0 => return LdrdReg,
            0x001000b0 => return LdrhReg,
            0x004000d0 => return LdrdImm,
            0x000000b0 => return StrhReg,
            _ => {},
        }
        match opcd & 0x0fe00090 {
            0x00000010 => return AndRegShiftReg,
            0x00a00010 => return AdcRegShiftReg,
            0x01a00010 => return MovRegShiftReg,
            0x01800010 => return OrrRegShiftReg,
            0x00200010 => return EorRegShiftReg,
            0x00e00010 => return RscRegShiftReg,
            0x01e00010 => return MvnRegShiftReg,
            0x00c00010 => return SbcRegShiftReg,
            0x00800010 => return AddRegShiftReg,
            0x01c00010 => return BicRegShiftReg,
            0x00600010 => return RsbRegShiftReg,
            0x00400010 => return SubRegShiftReg,
            _ => {},
        }
        match opcd & 0x0ff00010 {
            0x01500000 => return CmpReg,
            0x01100000 => return TstReg,
            0x01700000 => return CmnReg,
            0x01300000 => return TeqReg,
            _ => {},
        }
        match opcd & 0x0ff00000 {
            0x03000000 => return MovImmAlt,
            0x03700000 => return CmnImm,
            0x0c400000 => return Mcrr,
            0x03500000 => return CmpImm,
            0x03100000 => return TstImm,
            0x0c500000 => return Mrrc,
            0x03300000 => return TeqImm,
            _ => {},
        }
        match opcd & 0x0f700010 {
            0x06700000 => return LdrbtAlt,
            0x06600000 => return StrbtAlt,
            0x06300000 => return LdrtAlt,
            0x06200000 => return StrtAlt,
            _ => {},
        }
        match opcd & 0x0fe00010 {
            0x00c00000 => return SbcReg,
            0x01800000 => return OrrReg,
            0x01c00000 => return BicReg,
            0x00800000 => return AddReg,
            0x00e00000 => return RscReg,
            0x00200000 => return EorReg,
            0x01e00000 => return MvnReg,
            0x00a00000 => return AdcReg,
            0x00400000 => return SubReg,
            0x01a00000 => return MovReg,
            0x00000000 => return AndReg,
            0x00600000 => return RsbReg,
            _ => {},
        }
        match opcd & 0x0fe00000 {
            0x03a00000 => return MovImm,
            0x02800000 => return AddImm,
            0x02a00000 => return AdcImm,
            0x02600000 => return RsbImm,
            0x03800000 => return OrrImm,
            0x03c00000 => return BicImm,
            0x02400000 => return SubImm,
            0x03e00000 => return MvnImm,
            0x02000000 => return AndImm,
            0x02e00000 => return RscImm,
            0x02200000 => return EorImm,
            0x02c00000 => return SbcImm,
            _ => {},
        }
        match opcd & 0x0f700000 {
            0x04700000 => return Ldrbt,
            0x04600000 => return Strbt,
            0x04300000 => return Ldrt,
            0x04200000 => return Strt,
            _ => {},
        }
        match opcd & 0x0fd00000 {
            0x08800000 => return Stm,
            0x08000000 => return Stmda,
            0x08100000 => return Ldmda,
            0x09900000 => return Ldmib,
            0x09100000 => return Ldmdb,
            0x08900000 => return Ldm,
            0x09000000 => return Stmdb,
            0x09800000 => return Stmib,
            _ => {},
        }
        if opcd & 0x0fb00000 == 0x03200000{
            return MsrImm;
        }
        match opcd & 0x0e500010 {
            0x06100000 => return LdrReg,
            0x06400000 => return StrbReg,
            0x06500000 => return LdrbReg,
            0x06000000 => return StrReg,
            _ => {},
        }
        match opcd & 0x0f100010 {
            0x0e100010 => return Mrc,
            0x0e000010 => return Mcr,
            _ => {},
        }
        match opcd & 0x0e500000 {
            0x0c000000 => return Stc,
            0x08500000 => return LdmRegUser,
            0x0c100000 => return LdcImm,
            0x04000000 => return StrImm,
            0x04400000 => return StrbImm,
            0x04500000 => return LdrbImm,
            0x08400000 => return StmRegUser,
            0x04100000 => return LdrImm,
            _ => {},
        }
        match opcd & 0x0f000000 {
            0x0f000000 => return Svc,
            0x0a000000 => return B,
            0x0b000000 => return BlImm,
            _ => {},
        }

        // Getting rid of these until I deem it necessary
        //match opcd & 0x0f300010 {
        //    0x07100000 => return PldReg,
        //    _ => {},
        //}
        //match opcd & 0x0f300000 {
        //    0x05100000 => return PldImm,
        //    _ => {},
        //}

        Undefined
    }

    pub fn bits_for_display(&self, bits: u32) -> Box<dyn xDisplay> {
        use crate::bits::arm::*;
        match self {
            ArmInst::AndRegShiftReg => Box::new(DpRsrBits(bits)) as Box<dyn xDisplay>,
            ArmInst::AdcRegShiftReg => Box::new(DpRsrBits(bits)) as Box<dyn xDisplay>,
            ArmInst::MovRegShiftReg => Box::new(MovRsrBits(bits)) as Box<dyn xDisplay>,
            ArmInst::OrrRegShiftReg => Box::new(DpRsrBits(bits)) as Box<dyn xDisplay>,
            ArmInst::EorRegShiftReg => Box::new(DpRsrBits(bits)) as Box<dyn xDisplay>,
            ArmInst::RscRegShiftReg => Box::new(DpRsrBits(bits)) as Box<dyn xDisplay>,
            ArmInst::MvnRegShiftReg => Box::new(MovRsrBits(bits)) as Box<dyn xDisplay>,
            ArmInst::SbcRegShiftReg => Box::new(DpRsrBits(bits)) as Box<dyn xDisplay>,
            ArmInst::AddRegShiftReg => Box::new(DpRsrBits(bits)) as Box<dyn xDisplay>,
            ArmInst::BicRegShiftReg => Box::new(DpRsrBits(bits)) as Box<dyn xDisplay>,
            ArmInst::RsbRegShiftReg => Box::new(DpRsrBits(bits)) as Box<dyn xDisplay>,
            ArmInst::SubRegShiftReg => Box::new(DpRsrBits(bits)) as Box<dyn xDisplay>,
            ArmInst::TeqRegShiftReg => Box::new(DpTestRsrBits(bits)) as Box<dyn xDisplay>,
            ArmInst::CmnRegShiftReg => Box::new(DpTestRsrBits(bits)) as Box<dyn xDisplay>,
            ArmInst::TstRegShiftReg => Box::new(DpTestRsrBits(bits)) as Box<dyn xDisplay>,
            ArmInst::CmpRegShiftReg => Box::new(DpTestRsrBits(bits)) as Box<dyn xDisplay>,
            ArmInst::SbcReg         => Box::new(DpRegBits(bits)) as Box<dyn xDisplay>,
            ArmInst::OrrReg         => Box::new(DpRegBits(bits)) as Box<dyn xDisplay>,
            ArmInst::BicReg         => Box::new(DpRegBits(bits)) as Box<dyn xDisplay>,
            ArmInst::AddReg         => Box::new(DpRegBits(bits)) as Box<dyn xDisplay>,
            ArmInst::RscReg         => Box::new(DpRegBits(bits)) as Box<dyn xDisplay>,
            ArmInst::EorReg         => Box::new(DpRegBits(bits)) as Box<dyn xDisplay>,
            ArmInst::MvnReg         => Box::new(MovRegBits(bits)) as Box<dyn xDisplay>,
            ArmInst::AdcReg         => Box::new(DpRegBits(bits)) as Box<dyn xDisplay>,
            ArmInst::SubReg         => Box::new(DpRegBits(bits)) as Box<dyn xDisplay>,
            ArmInst::MovReg         => Box::new(MovRegBits(bits)) as Box<dyn xDisplay>,
            ArmInst::AndReg         => Box::new(DpRegBits(bits)) as Box<dyn xDisplay>,
            ArmInst::RsbReg         => Box::new(DpRegBits(bits)) as Box<dyn xDisplay>,
            ArmInst::CmpReg         => Box::new(DpTestRegBits(bits)) as Box<dyn xDisplay>,
            ArmInst::TstReg         => Box::new(DpTestRegBits(bits)) as Box<dyn xDisplay>,
            ArmInst::CmnReg         => Box::new(DpTestRegBits(bits)) as Box<dyn xDisplay>,
            ArmInst::TeqReg         => Box::new(DpTestRegBits(bits)) as Box<dyn xDisplay>,
            ArmInst::MovImm         => Box::new(MovImmBits(bits)) as Box<dyn xDisplay>,
            ArmInst::AddImm         => Box::new(DpImmBits(bits)) as Box<dyn xDisplay>,
            ArmInst::AdcImm         => Box::new(DpImmBits(bits)) as Box<dyn xDisplay>,
            ArmInst::RsbImm         => Box::new(DpImmBits(bits)) as Box<dyn xDisplay>,
            ArmInst::OrrImm         => Box::new(DpImmBits(bits)) as Box<dyn xDisplay>,
            ArmInst::BicImm         => Box::new(DpImmBits(bits)) as Box<dyn xDisplay>,
            ArmInst::SubImm         => Box::new(DpImmBits(bits)) as Box<dyn xDisplay>,
            ArmInst::MvnImm         => Box::new(MovImmBits(bits)) as Box<dyn xDisplay>,
            ArmInst::AndImm         => Box::new(DpImmBits(bits)) as Box<dyn xDisplay>,
            ArmInst::RscImm         => Box::new(DpImmBits(bits)) as Box<dyn xDisplay>,
            ArmInst::EorImm         => Box::new(DpImmBits(bits)) as Box<dyn xDisplay>,
            ArmInst::SbcImm         => Box::new(DpImmBits(bits)) as Box<dyn xDisplay>,
            ArmInst::CmnImm         => Box::new(DpTestImmBits(bits)) as Box<dyn xDisplay>,
            ArmInst::CmpImm         => Box::new(DpTestImmBits(bits)) as Box<dyn xDisplay>,
            ArmInst::TstImm         => Box::new(DpTestImmBits(bits)) as Box<dyn xDisplay>,
            ArmInst::TeqImm         => Box::new(DpTestImmBits(bits)) as Box<dyn xDisplay>,
            ArmInst::StrImm         => Box::new(LsImmBits(bits)) as Box<dyn xDisplay>,
            ArmInst::StrhImm        => Box::new(LsSignedImmBits(bits)) as Box<dyn xDisplay>,
            ArmInst::StrdImm        => Box::new(LsSignedImmBits(bits)) as Box<dyn xDisplay>,
            ArmInst::StrbImm        => Box::new(LsImmBits(bits)) as Box<dyn xDisplay>,
            ArmInst::StrReg         => Box::new(LsRegBits(bits)) as Box<dyn xDisplay>,
            ArmInst::StrbReg        => Box::new(LsRegBits(bits)) as Box<dyn xDisplay>,
            ArmInst::StrhReg        => Box::new(LsSignedRegBits(bits)) as Box<dyn xDisplay>,
            ArmInst::StrdReg        => Box::new(LsSignedRegBits(bits)) as Box<dyn xDisplay>,
            ArmInst::LdrImm         => Box::new(LsImmBits(bits)) as Box<dyn xDisplay>,
            ArmInst::LdrhImm        => Box::new(LsSignedImmBits(bits)) as Box<dyn xDisplay>,
            ArmInst::LdrdImm        => Box::new(LsSignedImmBits(bits)) as Box<dyn xDisplay>,
            ArmInst::LdrbImm        => Box::new(LsImmBits(bits)) as Box<dyn xDisplay>,
            ArmInst::LdrsbImm       => Box::new(LsSignedImmBits(bits)) as Box<dyn xDisplay>,
            ArmInst::LdrshImm       => Box::new(LsSignedRegBits(bits)) as Box<dyn xDisplay>,
            ArmInst::LdrReg         => Box::new(LsRegBits(bits)) as Box<dyn xDisplay>,
            ArmInst::LdrbReg        => Box::new(LsRegBits(bits)) as Box<dyn xDisplay>,
            ArmInst::LdrhReg        => Box::new(LsSignedRegBits(bits)) as Box<dyn xDisplay>,
            ArmInst::LdrdReg        => Box::new(LsSignedRegBits(bits)) as Box<dyn xDisplay>,
            ArmInst::LdrsbReg       => Box::new(LsSignedRegBits(bits)) as Box<dyn xDisplay>,
            ArmInst::LdrshReg       => Box::new(LsSignedRegBits(bits)) as Box<dyn xDisplay>,
            ArmInst::Qdadd          => Box::new(QBits(bits)) as Box<dyn xDisplay>,
            ArmInst::Qsub           => Box::new(QBits(bits)) as Box<dyn xDisplay>,
            ArmInst::Qadd           => Box::new(QBits(bits)) as Box<dyn xDisplay>,
            ArmInst::Qdsub          => Box::new(QBits(bits)) as Box<dyn xDisplay>,
            ArmInst::Smull          => Box::new(SignedMlBits(bits)) as Box<dyn xDisplay>,
            ArmInst::Umlal          => Box::new(SignedMlBits(bits)) as Box<dyn xDisplay>,
            ArmInst::Smlal          => Box::new(SignedMlBits(bits)) as Box<dyn xDisplay>,
            ArmInst::Umull          => Box::new(SignedMlBits(bits)) as Box<dyn xDisplay>,
            ArmInst::Mul            => Box::new(MulBits(bits)) as Box<dyn xDisplay>,
            ArmInst::Mla            => Box::new(MlaBits(bits)) as Box<dyn xDisplay>,
            ArmInst::Smulwb         => Box::new(SmulwbBits(bits)) as Box<dyn xDisplay>,
            ArmInst::Smlawb         => Box::new(SmlawbBits(bits)) as Box<dyn xDisplay>,
            ArmInst::Smlalbb        => Box::new(SmalbbBits(bits)) as Box<dyn xDisplay>,
            ArmInst::Smlabb         => Box::new(SmlabbBits(bits)) as Box<dyn xDisplay>,
            ArmInst::Smulbb         => Box::new(SmulbbBits(bits)) as Box<dyn xDisplay>,
            ArmInst::Ldrbt          => Box::new(LsTransBits(bits)) as Box<dyn xDisplay>,
            ArmInst::Strbt          => Box::new(LsTransBits(bits)) as Box<dyn xDisplay>,
            ArmInst::Ldrt           => Box::new(LsTransBits(bits)) as Box<dyn xDisplay>,
            ArmInst::Strt           => Box::new(LsTransBits(bits)) as Box<dyn xDisplay>,
            ArmInst::MovImmAlt      => Box::new(MovImmAltBits(bits)) as Box<dyn xDisplay>,
            ArmInst::LdrbtAlt       => Box::new(LsTransAltBits(bits)) as Box<dyn xDisplay>,
            ArmInst::StrbtAlt       => Box::new(LsTransAltBits(bits)) as Box<dyn xDisplay>,
            ArmInst::LdrtAlt        => Box::new(LsTransAltBits(bits)) as Box<dyn xDisplay>,
            ArmInst::StrtAlt        => Box::new(LsTransAltBits(bits)) as Box<dyn xDisplay>,
            ArmInst::Stm            => Box::new(LsMultiBits(bits)) as Box<dyn xDisplay>,
            ArmInst::Stmda          => Box::new(LsMultiBits(bits)) as Box<dyn xDisplay>,
            ArmInst::Ldmda          => Box::new(LsMultiBits(bits)) as Box<dyn xDisplay>,
            ArmInst::Ldmib          => Box::new(LsMultiBits(bits)) as Box<dyn xDisplay>,
            ArmInst::Ldmdb          => Box::new(LsMultiBits(bits)) as Box<dyn xDisplay>,
            ArmInst::Ldm            => Box::new(LsMultiBits(bits)) as Box<dyn xDisplay>,
            ArmInst::Stmdb          => Box::new(LsMultiBits(bits)) as Box<dyn xDisplay>,
            ArmInst::Stmib          => Box::new(LsMultiBits(bits)) as Box<dyn xDisplay>,
            ArmInst::LdmRegUser     => Box::new(LdmRegUserBits(bits)) as Box<dyn xDisplay>,
            ArmInst::StmRegUser     => Box::new(StmRegUserBits(bits)) as Box<dyn xDisplay>,
            ArmInst::MsrImm         => Box::new(MsrImmBits(bits)) as Box<dyn xDisplay>,
            ArmInst::MsrReg         => Box::new(MsrRegBits(bits)) as Box<dyn xDisplay>,
            ArmInst::Mrs            => Box::new(MrsBits(bits)) as Box<dyn xDisplay>,
            ArmInst::Mcrr           => Box::new(MoveCoprocDoubleBits(bits)) as Box<dyn xDisplay>,
            ArmInst::Mrrc           => Box::new(MoveCoprocDoubleBits(bits)) as Box<dyn xDisplay>,
            ArmInst::Mrc            => Box::new(MoveCoprocBits(bits)) as Box<dyn xDisplay>,
            ArmInst::Mcr            => Box::new(MoveCoprocBits(bits)) as Box<dyn xDisplay>,
            ArmInst::Stc            => Box::new(LsCoprocBits(bits)) as Box<dyn xDisplay>,
            ArmInst::PldReg         => Box::new(PldRegBits(bits)) as Box<dyn xDisplay>,
            ArmInst::PldImm         => Box::new(PldImmBits(bits)) as Box<dyn xDisplay>,
            ArmInst::LdcImm         => Box::new(LsCoprocBits(bits)) as Box<dyn xDisplay>,
            ArmInst::Clz            => Box::new(ClzBits(bits)) as Box<dyn xDisplay>,
            ArmInst::B              => Box::new(BranchBits(bits)) as Box<dyn xDisplay>,
            ArmInst::BlImm          => Box::new(BranchBits(bits)) as Box<dyn xDisplay>,
            ArmInst::Bx             => Box::new(BxBits(bits)) as Box<dyn xDisplay>,
            ArmInst::BlxReg         => Box::new(BxBits(bits)) as Box<dyn xDisplay>,
            ArmInst::Bxj            => Box::new(BxBits(bits)) as Box<dyn xDisplay>,
            ArmInst::Svc            => Box::new(BranchBits(bits)) as Box<dyn xDisplay>,
            ArmInst::Bkpt           => Box::new(BkptBits(bits)) as Box<dyn xDisplay>,
            ArmInst::BlxImm         => Box::new(BranchBits(bits)) as Box<dyn xDisplay>,
            ArmInst::Undefined      => todo!(),
        }
    }
}

